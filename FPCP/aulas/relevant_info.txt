Processo
--------
- Abstra√ß√£o de um programa em execu√ß√£o
- Associado a um conjunto de recursos do sistema operacional
- Composto por:
    - Espa√ßo de endere√ßamento (mem√≥ria)
    - PID (identificador do processo)
    - Uma ou mais threads
    - Outros: sockets, arquivos abertos, etc.

Escalonador de Processos (Scheduler)
------------------------------------
- Gerencia a execu√ß√£o dos processos
- Decide qual processo deve ser executado em um dado momento

Mem√≥ria Virtual
---------------
- Mem√≥ria f√≠sica = RAM
- Mem√≥ria virtual = SWAP (disco r√≠gido ou SSD)
- Cada processo tem seu pr√≥prio espa√ßo de endere√ßamento virtual
    - Processos n√£o conhecem seu endere√ßo real
    - N√£o sabem se est√£o na RAM ou no SWAP
- Tradu√ß√£o feita pelo sistema operacional (SO)
- Ao acessar um endere√ßo virtual:
    - SO verifica se o dado est√° na RAM ou SWAP
    - Se na RAM: acesso normal
    - Se no SWAP: SO faz a troca (swap) do dado do SWAP para a RAM e possivelmente troca outro dado da RAM para o SWAP
    - Essa troca √© chamada de page fault
    - Se o processo acessa um endere√ßo inv√°lido: SO mata o processo (segmentation fault)
- Sistemas Windows: arquivo de pagina√ß√£o √© pagefile.sys
- Linux: arquivo de pagina√ß√£o √© swapfile

Threads
-------
- Threads do SO (nativas):
    - Gerenciadas pelo kernel
    - Podem rodar em m√∫ltiplos n√∫cleos
    - Maior overhead de cria√ß√£o/gerenciamento
- Threads da aplica√ß√£o (green):
    - Gerenciadas por bibliotecas ou VMs
    - Mais leves e r√°pidas de criar
    - Limitadas a 1 n√∫cleo real executando

Kernel Threads
--------------
- Criadas e gerenciadas pelo kernel do SO
- Cada thread do SO pode ser agendada independentemente
- Podem rodar em m√∫ltiplos n√∫cleos de CPU

Threads: concorr√™ncia ou paralelismo?
-------------------------------------
- As threads do SO podem ser concorrentes ou paralelas, dependendo do n√∫mero de n√∫cleos da CPU e do escalonamento do SO

Sistemas Distribu√≠dos
---------------------
Segundo Tanenbaum: conjunto de computadores independentes que parecem um sistema √∫nico para o usu√°rio.

Caracter√≠sticas:
- M√∫ltiplos computadores aut√¥nomos
- Usu√°rios percebem como um sistema unificado
- Comunica√ß√£o por troca de mensagens

Centralizado vs Descentralizado vs Distribu√≠do
----------------------------------------------
- Solu√ß√µes centralizadas n√£o escalam bem e s√£o vulner√°veis.

Sistemas distribu√≠dos lidam com:
- Compartilhamento de recursos
- Falta de rel√≥gio global
- Concorr√™ncia e falhas independentes

Desafios em Sistemas Distribu√≠dos
---------------------------------
- Heterogeneidade: diferentes sistemas operacionais, redes, linguagens
- Abertura: interfaces expostas e padronizadas
- Seguran√ßa: confidencialidade, integridade, disponibilidade, autenticidade
- Escalabilidade: manter desempenho com muitos usu√°rios
- Falhas: erros parciais e sua detec√ß√£o/recupera√ß√£o
- Concorr√™ncia: acesso simult√¢neo a recursos
- Transpar√™ncia: ocultar a complexidade da distribui√ß√£o (acesso, localiza√ß√£o, replica√ß√£o, falha, etc)

Middleware
----------
- Camada de software que facilita o desenvolvimento de sistemas distribu√≠dos
- Pode envolver adaptadores (wrappers), brokers e interceptadores

Arquiteturas Centralizadas
--------------------------
- Cliente-servidor com uma ou mais camadas (1-tier, 2-tier, 3-tier)
- Exemplo: NFS, onde o cliente acessa um sistema de arquivos remoto

Arquiteturas Alternativas
-------------------------
- Distribui√ß√£o vertical: camadas separadas em servidores diferentes
- Distribui√ß√£o horizontal: divis√£o de carga em partes l√≥gicas equivalentes

P2P
---
- Estruturado (ex: Chord, com anel e hash de chaves)
- N√£o estruturado (ex: flooding, random walk)
- Super-peer: peers com mais responsabilidade (√≠ndices, brokers)

Exemplo: BitTorrent
-------------------
- Arquivo .torrent aponta para um tracker
- Peers trocam partes (chunks) entre si (swarm)

Cloud Computing
---------------
Quatro camadas:
1. Hardware
2. Infraestrutura (virtualiza√ß√£o)
3. Plataforma (APIs como Amazon S3)
4. Aplica√ß√£o (software final como planilhas e editores)

Edge Computing
--------------
- Servidores na borda da rede (mais pr√≥ximos dos usu√°rios)
- Argumentos: lat√™ncia, largura de banda, confiabilidade, seguran√ßa
- Desafios: aloca√ß√£o, posicionamento, orquestra√ß√£o da borda

Blockchain
----------
- Cadeia de blocos imut√°vel (append-only)
- Descentraliza√ß√£o: participantes elegem l√≠der para adicionar blocos
- Problemas: coordena√ß√£o distribu√≠da, consenso seguro e justo

O que √© Middleware?
-------------------
Middleware √© uma camada de software que se posiciona entre o SO e as aplica√ß√µes distribu√≠das, oferecendo servi√ßos prontos para resolver problemas cl√°ssicos de heterogeneidade e distribui√ß√£o.

Defini√ß√µes-Chave:
-------------------
Bernstein (1996): ‚ÄúConjunto de servi√ßos que ajuda a resolver problemas de heterogeneidade e distribui√ß√£o.‚Äù
Bakken (2001): ‚ÄúSoftware para gerenciar a complexidade e heterogeneidade dos sistemas distribu√≠dos.‚Äù

Por que usar Middleware?
-------------------
- Middleware existe para abstrair a complexidade de desenvolver sistemas distribu√≠dos, fornecendo:
- Comunica√ß√£o de alto n√≠vel (em vez de sockets e protocolos manuais).
- Interoperabilidade entre linguagens, redes e sistemas operacionais diferentes.
- Facilidade na programa√ß√£o concorrente, toler√¢ncia a falhas e escalabilidade.

| Categoria            | Exemplos                   | Aplica√ß√£o                         |
| -------------------- | -------------------------- | --------------------------------- |
| RPC/RMI              | gRPC, Java RMI             | Chamada remota de procedimentos   |
| Mensageria (P/S)     | Kafka, Mosquitto, RabbitMQ | Publish/Subscribe, filas          |
| Orientado a Objetos  | CORBA                      | Integra√ß√£o entre objetos          |
| Web Services         | REST, SOAP                 | Servi√ßos HTTP com padroniza√ß√£o    |
| Middleware de Evento | DDS, ZeroMQ                | Sistemas reativos e em tempo real |


üßô‚Äç‚ôÇÔ∏è Transpar√™ncias Oferecidas pelo Middleware

Middleware ajuda a esconder as complexidades do sistema distribu√≠do com os seguintes tipos de transpar√™ncia:

| Tipo                     | Descri√ß√£o                                             |
| ------------------------ | ----------------------------------------------------- |
| **Migra√ß√£o / Reloca√ß√£o** | Recursos podem ser movidos sem impacto para o cliente |
| **Acesso**               | Acesso remoto e local ocorrem da mesma forma          |
| **Localiza√ß√£o**          | Cliente n√£o precisa saber onde o servi√ßo est√°         |
| **Concorr√™ncia**         | Permite m√∫ltiplos acessos seguros a um mesmo recurso  |
| **Replica√ß√£o**           | Oculta exist√™ncia de m√∫ltiplas c√≥pias de um recurso   |
| **Falha**                | Oculta falhas de componentes ou redes                 |
| **Tecnologia**           | Esconde diferen√ßas de linguagem, SO, rede             |

MALCRFT

üß∞ Modelos de

O tipo de middleware depende do estilo de comunica√ß√£o que ele fornece

| Modelo                          | Comunica√ß√£o                       | Exemplo / Tecnologia       | Caracter√≠sticas                                     |
| ------------------------------- | --------------------------------- | -------------------------- | --------------------------------------------------- |
| **Procedural (RPC)**            | Chamada remota s√≠ncrona           | gRPC, Java RMI             | request/reply, client-server cl√°ssico               |
| **Orientado a Objetos**         | M√©todos remotos                   | CORBA, EJB                 | Evolu√ß√£o de RPC com interfaces (IDLs)               |
| **Transacional**                | RPC + Transa√ß√µes                  | Enterprise JavaBeans       | Suporte a controle de transa√ß√µes (two-phase commit) |
| **Orientado a Mensagem (MOM)**  | Ass√≠ncrona / Pub-Sub              | Kafka, RabbitMQ, Mosquitto | Fila de mensagens, desacoplamento, escala N:M       |
| **Baseado em Espa√ßo de Tuplas** | Compartilhado (take, write, read) | Linda, JavaSpaces          | Mem√≥ria virtual compartilhada, concorr√™ncia natural |
